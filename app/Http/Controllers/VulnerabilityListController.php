<?php

namespace App\Http\Controllers;

use App\FlatVulnerabilityByDate;
use App\NsiQueue;
use App\Traits\Vulnerabilities;
use Illuminate\Support\Carbon;
use Illuminate\Support\Collection as SupportCollection;
use Illuminate\Database\Eloquent\Collection as EloquentCollection;

class VulnerabilityListController extends Controller
{
    use Vulnerabilities;

    public function index()
    {
        $vulnerabilitiesByDates = FlatVulnerabilityByDate::first() ;

        $vulnerabilitiesByDates = $vulnerabilitiesByDates ? json_decode($vulnerabilitiesByDates->vulnerabilities_by_date) : [];

        return view('vulnerability-list')->with('vulnerabilitiesByDates', $vulnerabilitiesByDates);
    }

    /**
     * old version
     * @return array  */
//    protected function groupVulnerabilitiesByDate()
//    {
//        $queue = new NsiQueue();
//
//        /** @var string $lastScanDay */
//        $lastScanDay = $queue->orderBy('status_date', 'desc')->get()->groupBy(function ($queue) {
//            return Carbon::createFromFormat('Y-m-d H:i:s', $queue->status_date)->format('Y-m-d');
//        })->take(1)->keys()->first();
//
//        $scantDate = Carbon::createFromFormat('Y-m-d', $lastScanDay);
//        $resultsByDate = [];
//
//        for ($i = 0; $i < 5; $i++) {
//            $date = $scantDate->format('Y-m-d');
//
//            $resultsByDate[$date]['VIN'] = $this->getVINForDate($scantDate);
//            $resultsByDate[$date]['VOUT'] = $this->getVOUTForDate($scantDate);
//            $resultsByDate[$date]['Net'] = $this->getNetByDate($scantDate);
//
//            $scantDate->subWeek();
//        }
//
//        return $resultsByDate;
//    }

    public function groupVulnerabilitiesByDate()
    {
        $scanDate = Carbon::createFromFormat(
            'Y-m-d H:i:s',
            NsiQueue::getLastScanDate()
        );

        $resultsByDate = [];

        for ($i = 0; $i < 5; $i++) {
            $date = $scanDate->format('Y-m-d');

            $resultsByDate[$date]['VIN'] = $this->getVINForDate($scanDate);
            $resultsByDate[$date]['VOUT'] = $this->getVOUTForDate($scanDate);
            $resultsByDate[$date]['Net'] = $this->getNetByDate($scanDate);

            $scanDate->subWeek();
        }

        return $resultsByDate;
    }

    protected function retrieveUniqQueueIds(array $vulnerabilities, $date)
    {
        $queue_ids = null;

        foreach ($vulnerabilities as $vulnerability) {

            if (empty($vulnerability->get($date))) {
                continue;
            } else {
                $queue_ids = $vulnerability->get($date)->pluck('queue_id')->unique()->all();
            }
        }

        return $queue_ids;
    }
}
