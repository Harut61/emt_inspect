<?php

namespace App\Http\Controllers;

use App\FlatTimeline;
use App\NsiQueue;
use App\Traits\Vulnerabilities;
use Illuminate\Database\Eloquent\Collection as EloquentCollection;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Collection as SupportCollection;
use Laracasts\Utilities\JavaScript\JavaScriptFacade as JavaScript;

class VulnerabilityTimelineController extends Controller
{
    use Vulnerabilities;

    public function index()
    {
        $fatTimeline = FlatTimeline::first();

        JavaScript::put([
            'totalVIN' => isset($fatTimeline->total_vin) ? json_decode($fatTimeline->total_vin) : [],
            'totalVOUT' => isset($fatTimeline->total_vout) ? json_decode($fatTimeline->total_vout) : [],
            'totalNet' => isset($fatTimeline->total_net) ?  json_decode($fatTimeline->total_net) : [],
            'nonMicrosoftVIN' => isset($fatTimeline->non_microsoft_vin) ? json_decode($fatTimeline->non_microsoft_vin) : [],
            'nonMicrosoftVOUT' => isset($fatTimeline->non_microsoft_vout) ? json_decode($fatTimeline->non_microsoft_vout) : [],
            'nonMicrosoftNet' => isset($fatTimeline->non_microsoft_net) ? json_decode($fatTimeline->non_microsoft_net): [],
            'microsoftVIN' => isset($fatTimeline->microsoft_vin) ? json_decode($fatTimeline->microsoft_vin) : [],
            'microsoftVOUT' => isset($fatTimeline->microsoft_vout) ?  json_decode($fatTimeline->microsoft_vout) : [],
            'microsoftNet' => isset($fatTimeline->microsoft_net) ? json_decode($fatTimeline->microsoft_net): []
        ]);

        return view('vulnerability-timeline');
    }

    /**
     * Iterats throgh weeks and calls instance method with name from $getVulnerabilities param.
     *
     * @param int $weeks
     * @param string $getVulnerabilities
     * @return array
     */
    public function getGroupedByDateVulnerabilitiesByType(Carbon $scantDate, string $getVulnerabilities, string $type)
    {
        $vulnerabilitiesByDate['type'] = $type;

        for ($i = 0; $i < 5; $i++) {
            $date = $scantDate->format('Y-m-d');
            $vulnerabilitiesByDate[$date] = $this->$getVulnerabilities($scantDate);

            $scantDate->subWeek();
        }

        return $vulnerabilitiesByDate;
    }

    /**
     * @param Carbon $date
     * @return SupportCollection
     */
    protected function getVINForNonMicrofoftByDate(Carbon $date)
    {
        return $this->getVINForDateByVendor($date, false);
    }

    /**
     * @param Carbon $date
     * @return SupportCollection
     */
    protected function getVINForMicrofoftByDate(Carbon $date)
    {
        return $this->getVINForDateByVendor($date, true);
    }

    /**
     * @param Carbon $date
     * @return SupportCollection
     */
    protected function getVOUTorNonMicrofoftByDate(Carbon $date)
    {
        return $this->getVOUTForDateByVendor($date, false);
    }

    /**
     * @param Carbon $date
     * @return SupportCollection
     */
    protected function getVOUTorMicrofoftByDate(Carbon $date)
    {
        return $this->getVOUTForDateByVendor($date, true);
    }

    /**
     * @param Carbon $from
     * @param Carbon $to
     * @return SupportCollection
     */
    protected function getNetNonMicrosoftByDate(Carbon $date)
    {
        return $this->getNetForDateByVendor($date, false);
    }

    /**
     * @param Carbon $from
     * @param Carbon $to
     * @return SupportCollection
     */
    protected function getNetMicrosoftByDate(Carbon $date)
    {
        return $this->getNetForDateByVendor($date, true);
    }
}
