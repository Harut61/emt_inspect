<?php

namespace App\Http\Controllers;

use App\Helpers\CollectionHelper;
use App\DiskSpaceResult;
use App\ServiceHealth;
use App\Traits\LogFiles;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Laracasts\Utilities\JavaScript\JavaScriptFacade as JavaScript;

class VulnerabilityHealthController extends Controller
{

    use LogFiles;

    protected $mariadbErrorMessages;
    protected $httpdErrorMessages;
    protected $scandaemonErrorMessages;
    protected $sgdaemonErrorMessages;

    public function __construct()
    {
        $mariadbErrorLogContent = Storage::has('server_logs/services/' . config('sshServices.mysql_type') . '/error.log') ?
            Storage::get('server_logs/services/' . config('sshServices.mysql_type') . '/error.log') : '';
        $httpdErrorLogContent = Storage::has('server_logs/services/httpd/error.log') ?
            Storage::get('server_logs/services/httpd/error.log') : '';
        $scandaemonErrorLogContent = Storage::has('server_logs/services/scandaemon/error.log') ?
            Storage::get('server_logs/services/scandaemon/error.log') : '';
        $sgdaemonError10LogContent = Storage::has('server_logs/services/sgdaemon/error.log') ?
            Storage::get('server_logs/services/sgdaemon/error.log') : '';

        $this->mariadbErrorMessages = $this->parseLogFile($mariadbErrorLogContent, false)->reverse();
        $this->httpdErrorMessages = $this->parseLogFile($httpdErrorLogContent, false)->reverse();
        $this->scandaemonErrorMessages = $this->parseLogFile($scandaemonErrorLogContent, false)->reverse();
        $this->sgdaemonErrorMessages = $this->parseLogFile($sgdaemonErrorLogContent, false)->reverse();
    }

    public function index()
    {
        $diskSpaceResults = new DiskSpaceResult;

        $diskSpaceResults = $diskSpaceResults->orderBy('scan_date', 'desc')->get()->groupBy(function ($queue) {
            return Carbon::createFromFormat('Y-m-d H:i:s', $queue->scan_date)->format('Y-m-d');
        })->take(15)->sortKeys()->all();

        JavaScript::put(['scans' => $diskSpaceResults]);

        /** @var Collection $servicesHealth */
        $servicesHealth = ServiceHealth::all();
        //Convert string data to Carbon.
        $servicesHealth->map(function ($service) {
            $service->start_time = isset($service->start_time) ? Carbon::createFromFormat('Y-m-d H:i:s', $service->start_time) : null;
            $service->fail_time = isset($service->fail_time) ? Carbon::createFromFormat('Y-m-d H:i:s', $service->fail_time) : null;
        });

        return view('vulnerability-health')
            ->with('mariadbErrorMessages', CollectionHelper::paginate($this->mariadbErrorMessages, 7))
            ->with('httpdErrorMessages', CollectionHelper::paginate($this->httpdErrorMessages, 7))
            ->with('scandaemonErrorMessages', CollectionHelper::paginate($this->scandaemonErrorMessages, 7))
            ->with('sgdaemonErrorMessages', CollectionHelper::paginate($this->sgdaemonErrorMessages, 7))
            ->with('mariadb', $servicesHealth->filter(function ($service) { return $service->name === config('sshServices.mysql_type'); })->first())
            ->with('httpd', $servicesHealth->filter(function ($service) { return $service->name === 'httpd'; })->first())
            ->with('scandaemon', $servicesHealth->filter(function ($service) { return $service->name === 'scandaemon'; })->first())
            ->with('sgdaemon', $servicesHealth->filter(function ($service) { return $service->name === 'sgdaemon'; })->first());
    }

    public function paginateAjax(Request $request)
    {
        $messages = null;

        if ($request->ajax()) {
            switch ($request->service) {
                case config('sshServices.mysql_type'):
                    $messages = CollectionHelper::paginate($this->mariadbErrorMessages, 7);
                    break;
                case 'httpd':
                    $messages = CollectionHelper::paginate($this->httpdErrorMessages, 7);
                    break;
                case 'scandaemon':
                    $messages = CollectionHelper::paginate($this->scandaemonErrorMessages, 7);
                    break;
                case 'sgdaemon':
                    $messages = CollectionHelper::paginate($this->scandaemonErrorMessages, 7);
                    break;
            }

            return view('spippets.log-messages-table')->with('messages', $messages)->with('type', $request->service)->render();
        }
    }

    public function downloadLogsCSV(Request $request)
    {
        $logMessages = null;

        switch ($request->service) {
            case config('sshServices.mysql_type'):
                $logMessages = $this->mariadbErrorMessages;
                break;
            case 'httpd':
                $logMessages = $this->httpdErrorMessages;
                break;
            case 'scandaemon':
                $logMessages = $this->scandaemonErrorMessages;
                break;
            case 'sgdaemon':
                $logMessages = $this->scandaemonErrorMessages;
                break;
        }


        return $this->createCSVDownloadFile("{$request->service}ErrorLogs.csv", $logMessages);
    }
}
