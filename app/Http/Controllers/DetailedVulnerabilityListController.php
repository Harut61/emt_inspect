<?php

namespace App\Http\Controllers;

use App\FlatDetailVulnerabilityList;
use App\FlatDetailVulnerabilityWeek;
use App\NsiQueue;
use App\NsiResult;
use App\Traits\Vulnerabilities;
use Illuminate\Contracts\Container\BindingResolutionException;
use Illuminate\Http\Request;
use Illuminate\Database\Eloquent\Collection as EloquentCollection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Carbon;
use Illuminate\Support\Collection as SupportCollection;
use Symfony\Component\HttpFoundation\StreamedResponse;

class DetailedVulnerabilityListController extends Controller
{
    use Vulnerabilities;

    public function showByDateAndType(Request $request)
    {
        $startOfDay = Carbon::createFromFormat('Y-m-d', $request->date)->startOfDay();
        $endOfDay = $startOfDay->copy()->endOfDay();

        $showCriticalityColumn = true;
        $showTypeSelect = false;

        /** @var Model $queue */
        $queue = new NsiQueue();


        /** @var NsiQueue $queue */
        $queue = new NsiQueue();
        $results = null;

        switch ($request->type) {
            case 'all':
                $results = $queue->whereBetween('status_date', [$startOfDay, $endOfDay])->get()->flatMap(function ($queue) {
                    return $queue->results;
                });
                break;
            case 'VIN':
                $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'VIN')->where('date', $startOfDay)->first()->VIN));
                $showTypeSelect = false;
                break;
            case 'VOUT':
                $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'VOUT')->where('date', $startOfDay)->first()->VOUT));
                $showCriticalityColumn = false;
                $showTypeSelect = false;
                break;
            case 'Net':
                $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'Net')->where('date', $startOfDay)->first()->Net));
                $showTypeSelect = false;
                break;
            case 'nonMicrosoftVIN':
                $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'nonMicrosoftVIN')->where('date', $startOfDay)->first()->nonMicrosoftVIN));
                break;
            case 'nonMicrosoftVOUT':
                $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'nonMicrosoftVOUT')->where('date', $startOfDay)->first()->nonMicrosoftVOUT));
                break;
            case 'nonMicrosoftNet':
                $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'nonMicrosoftNet')->where('date', $startOfDay)->first()->nonMicrosoftNet));
                break;
            case 'microsoftVIN':
                $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'microsoftVIN')->where('date', $startOfDay)->first()->microsoftVIN));
                break;
            case 'microsoftVOUT':
                $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'microsoftVOUT')->where('date', $startOfDay)->first()->microsoftVOUT));
                break;
            case 'microsoftNet':
                $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'microsoftNet')->where('date', $startOfDay)->first()->microsoftNet));
                break;
        }

        return view('detailed-vulnerabilities')->with('results', $results)
            ->with('result_ids', implode(',', $results->pluck('id')->all()))
            ->with('showCriticalityColumn', $showCriticalityColumn)
            ->with('showTypeSelect', $showTypeSelect)
            ->with('type', $request->type)
            ->with('startOfDay', $request->date);
    }

    public function showLastFiveWeeksByType(Request $request)
    {
        $type = $request->type;

        $showCriticalityColumn = true;
        $showTypeSelect = false;

        /** @var SupportCollection $results */
        $results = null;

        switch ($type) {
            case 'VIN':
                $results =  collect(json_decode(FlatDetailVulnerabilityWeek::first()->VIN));
                break;
            case 'VOUT':
                $results =  collect(json_decode(FlatDetailVulnerabilityWeek::first()->VOUT));
                $showCriticalityColumn = false;
                break;
            case 'NetNonMicrosoft':
                $results =  collect(json_decode(FlatDetailVulnerabilityWeek::first()->NetNonMicrosoft));
                break;
            case 'NetMicrosoft':
                $results =  collect(json_decode(FlatDetailVulnerabilityWeek::first()->NetMicrosoft));
                break;
            default:
                redirect()->back();
                break;
        }


        $result_ids = implode(',', $results->pluck('id')->all());

        return view('detailed-vulnerabilities')->with('results', $results)
            ->with('result_ids', $result_ids)
            ->with('showCriticalityColumn', $showCriticalityColumn)
            ->with('showTypeSelect', $showTypeSelect)
            ->with('type', $type)
            ->with('startOfDay', 'week');
    }

    public function downloadResultsCSV(Request $request)
    {
        /** @var NsiQueue $queue */
        $queue = new NsiQueue();
        $results = null;

        $startOfDay = $request->start_of_day;

        if($startOfDay == 'week'){
            switch ($request->type) {
                case 'VIN':
                    $results =  collect(json_decode(FlatDetailVulnerabilityWeek::first()->VIN));
                    break;
                case 'VOUT':
                    $results =  collect(json_decode(FlatDetailVulnerabilityWeek::first()->VOUT));
                    $showCriticalityColumn = false;
                    break;
                case 'NetNonMicrosoft':
                    $results =  collect(json_decode(FlatDetailVulnerabilityWeek::first()->NetNonMicrosoft));
                    break;
                case 'NetMicrosoft':
                    $results =  collect(json_decode(FlatDetailVulnerabilityWeek::first()->NetMicrosoft));
                    break;
                default:
                    redirect()->back();
                    break;
            }
        }else{
            switch ($request->type) {
                case 'all':
                    $results = $queue->whereBetween('status_date', [$startOfDay, ''])->get()->flatMap(function ($queue) {
                        return $queue->results;
                    });
                    break;
                case 'VIN':
                    $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'VIN')->where('date', $startOfDay)->first()->VIN));
                    $showTypeSelect = false;
                    break;
                case 'VOUT':
                    $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'VOUT')->where('date', $startOfDay)->first()->VOUT));
                    $showCriticalityColumn = false;
                    $showTypeSelect = false;
                    break;
                case 'Net':
                    $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'Net')->where('date', $startOfDay)->first()->Net));
                    $showTypeSelect = false;
                    break;
                case 'nonMicrosoftVIN':
                    $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'nonMicrosoftVIN')->where('date', $startOfDay)->first()->nonMicrosoftVIN));
                    break;
                case 'nonMicrosoftVOUT':
                    $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'nonMicrosoftVOUT')->where('date', $startOfDay)->first()->nonMicrosoftVOUT));
                    break;
                case 'nonMicrosoftNet':
                    $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'nonMicrosoftNet')->where('date', $startOfDay)->first()->nonMicrosoftNet));
                    break;
                case 'microsoftVIN':
                    $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'microsoftVIN')->where('date', $startOfDay)->first()->microsoftVIN));
                    break;
                case 'microsoftVOUT':
                    $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'microsoftVOUT')->where('date', $startOfDay)->first()->microsoftVOUT));
                    break;
                case 'microsoftNet':
                    $results =  collect(json_decode(FlatDetailVulnerabilityList::where('type', 'microsoftNet')->where('date', $startOfDay)->first()->microsoftNet));
                    break;
            }
        }

        return $this->generateCSVFromCollection($results);
    }

    /**
     * @param SupportCollection $collection
     * @return StreamedResponse
     * @throws BindingResolutionException
     */
    protected function generateCSVFromCollection(SupportCollection $collection)
    {

        $fileName = "Export.csv";

        $headers = [
            "Content-type"        => "text/csv",
            "Content-Disposition" => "attachment; filename=$fileName",
            "Pragma"              => "no-cache",
            "Cache-Control"       => "must-revalidate, post-check=0, pre-check=0",
            "Expires"             => "0"
        ];

        $columns = ['Name', 'Version', 'Status', 'Criticality'];


        $callback = function () use ($collection, $columns) {
            $file = fopen('php://output', 'w');
            fputcsv($file, $columns);
            foreach ($collection as $result) {
                $row['Name']  = $result->os_soft_name;
                $row['Version']    = $result->version;

                if ($result->secure !== 0){
                    $row['Status'] = 'Secure';
                }elseif ($result->criticality === null){
                    $row['Status'] =   'EOL';
                }else{
                    $row['Status'] =  'Insecure';
                }

                if($result->criticality === null){
                    $row['Criticality']  = 'EOL';
                }else{
                    switch ($result->criticality) {
                        case '0':
                        case '1':
                            $row['Criticality']  = 'Extremely critical';
                            break;
                        case '2':
                            $row['Criticality']  = 'Highly critical';
                            break;
                        case '3':
                            $row['Criticality']  = 'Moderately critical';
                            break;
                        case '4':
                            $row['Criticality']  = 'Less critical';
                            break;
                        case '5':
                            $row['Criticality']  = 'Not critical';
                            break;
                    }
                }

                fputcsv($file, array($row['Name'], $row['Version'], $row['Status'], $row['Criticality']));
            }

            fclose($file);
        };

        return response()->stream($callback, 200, $headers);
    }

    /**
     * @param EloquentCollection $queues
     * @return Collection
     */
    protected function getQueuesResults(string $queues): SupportCollection
    {
        $queue = new NsiQueue();

        /** @var EloquentCollection $queues */
        $queues = $queue->find(explode(',', $queues));
        $resultsCollection = collect([]);

        foreach ($queues as $queue) {
            foreach ($queue->results as $result) {
                $resultsCollection->push($result);
            }
        }

        return $resultsCollection;
    }
}
