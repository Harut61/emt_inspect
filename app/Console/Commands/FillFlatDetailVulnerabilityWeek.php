<?php

namespace App\Console\Commands;

use App\FlatDetailVulnerabilityWeek;
use App\Traits\Vulnerabilities;
use Illuminate\Console\Command;
use Illuminate\Support\Carbon;

class FillFlatDetailVulnerabilityWeek extends Command
{

    use Vulnerabilities;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'fill:DetailVulnerabilityWeek';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'fill detail vulnerability week';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        echo 'run FillFlatDetailVulnerabilityWeek Cron job'. PHP_EOL;

        $vinResults = $this->getVINForFiveWeeks()->filter(function ($result) {
            return $result;
        });

        $vinArray = [];
        foreach ($vinResults as $k => $v){
            $vinArray[$k]['id'] = $v->id;
            $vinArray[$k]['queue_id'] = $v->queue_id;
            $vinArray[$k]['path'] = $v->path;
            $vinArray[$k]['version'] = $v->version;
            $vinArray[$k]['version_rule_id'] = $v->version_rule_id;
            $vinArray[$k]['secure'] = $v->secure;
            $vinArray[$k]['eol'] = $v->eol;
            $vinArray[$k]['type'] = $v->type;
            $vinArray[$k]['product_id'] = $v->product_id;
            $vinArray[$k]['secure_version'] = $v->secure_version;
            $vinArray[$k]['unpatched'] = $v->unpatched;
            $vinArray[$k]['vuln_id'] = $v->vuln_id;
            $vinArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
            $vinArray[$k]['special_path'] = $v->special_path;
            $vinArray[$k]['arch'] = $v->arch;
            $vinArray[$k]['installationCount'] = $v->installationCount;
            $vinArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
            $vinArray[$k]['criticality'] = $v->criticality;

        }

        $vountResults = $this->getVOUTForFiveWeeks()->filter(function ($result) {
            return $result;
        });

        $voutArray = [];
        foreach ($vountResults as $k => $v){
            $voutArray[$k]['id'] = $v->id;
            $voutArray[$k]['queue_id'] = $v->queue_id;
            $voutArray[$k]['path'] = $v->path;
            $voutArray[$k]['version'] = $v->version;
            $voutArray[$k]['version_rule_id'] = $v->version_rule_id;
            $voutArray[$k]['secure'] = $v->secure;
            $voutArray[$k]['eol'] = $v->eol;
            $voutArray[$k]['type'] = $v->type;
            $voutArray[$k]['product_id'] = $v->product_id;
            $voutArray[$k]['secure_version'] = $v->secure_version;
            $voutArray[$k]['unpatched'] = $v->unpatched;
            $voutArray[$k]['vuln_id'] = $v->vuln_id;
            $voutArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
            $voutArray[$k]['special_path'] = $v->special_path;
            $voutArray[$k]['arch'] = $v->arch;
            $voutArray[$k]['installationCount'] = $v->installationCount;
            $voutArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
            $voutArray[$k]['criticality'] = $v->criticality;
        }

        $nonMicrosoftNetResults = $this->getCurrentlyActiveVulnerabilitiesByVendor(false)->filter(function ($result) {
            return $result;
        });

        $nonMicrosoftNetArray = [];
        foreach ($nonMicrosoftNetResults as $k => $v){
            $nonMicrosoftNetArray[$k]['id'] = $v->id;
            $nonMicrosoftNetArray[$k]['queue_id'] = $v->queue_id;
            $nonMicrosoftNetArray[$k]['path'] = $v->path;
            $nonMicrosoftNetArray[$k]['version'] = $v->version;
            $nonMicrosoftNetArray[$k]['version_rule_id'] = $v->version_rule_id;
            $nonMicrosoftNetArray[$k]['secure'] = $v->secure;
            $nonMicrosoftNetArray[$k]['eol'] = $v->eol;
            $nonMicrosoftNetArray[$k]['type'] = $v->type;
            $nonMicrosoftNetArray[$k]['product_id'] = $v->product_id;
            $nonMicrosoftNetArray[$k]['secure_version'] = $v->secure_version;
            $nonMicrosoftNetArray[$k]['unpatched'] = $v->unpatched;
            $nonMicrosoftNetArray[$k]['vuln_id'] = $v->vuln_id;
            $nonMicrosoftNetArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
            $nonMicrosoftNetArray[$k]['special_path'] = $v->special_path;
            $nonMicrosoftNetArray[$k]['arch'] = $v->arch;
            $nonMicrosoftNetArray[$k]['installationCount'] = $v->installationCount;
            $nonMicrosoftNetArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
            $nonMicrosoftNetArray[$k]['criticality'] = $v->criticality;
        }

        $resultsNetMicrosoft = $this->getCurrentlyActiveVulnerabilitiesByVendor(true)->filter(function ($result) {
            return $result;
        });

        $microsoftNetArray = [];
        foreach ($resultsNetMicrosoft as $k => $v){
            $microsoftNetArray[$k]['id'] = $v->id;
            $microsoftNetArray[$k]['queue_id'] = $v->queue_id;
            $microsoftNetArray[$k]['path'] = $v->path;
            $microsoftNetArray[$k]['version'] = $v->version;
            $microsoftNetArray[$k]['version_rule_id'] = $v->version_rule_id;
            $microsoftNetArray[$k]['secure'] = $v->secure;
            $microsoftNetArray[$k]['eol'] = $v->eol;
            $microsoftNetArray[$k]['type'] = $v->type;
            $microsoftNetArray[$k]['product_id'] = $v->product_id;
            $microsoftNetArray[$k]['secure_version'] = $v->secure_version;
            $microsoftNetArray[$k]['unpatched'] = $v->unpatched;
            $microsoftNetArray[$k]['vuln_id'] = $v->vuln_id;
            $microsoftNetArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
            $microsoftNetArray[$k]['special_path'] = $v->special_path;
            $microsoftNetArray[$k]['arch'] = $v->arch;
            $microsoftNetArray[$k]['installationCount'] = $v->installationCount;
            $microsoftNetArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
            $microsoftNetArray[$k]['criticality'] = $v->criticality;
        }


        FlatDetailVulnerabilityWeek::create([
            'VIN' => json_encode($vinArray),
            'VOUT' => json_encode($voutArray),
            'NetNonMicrosoft' => json_encode($nonMicrosoftNetArray),
            'NetMicrosoft' => json_encode($microsoftNetArray),
        ]);


        $flatTimeline = FlatDetailVulnerabilityWeek::get();

        if(count($flatTimeline) > 1){
            FlatDetailVulnerabilityWeek::first()->delete();
        }
    }
}
