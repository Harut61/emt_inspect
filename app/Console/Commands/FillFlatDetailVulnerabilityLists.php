<?php

namespace App\Console\Commands;

use App\FlatDetailVulnerabilityList;
use App\FlatTimeline;
use App\Traits\Vulnerabilities;
use Illuminate\Console\Command;
use Illuminate\Support\Carbon;

class FillFlatDetailVulnerabilityLists extends Command
{
    use Vulnerabilities;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'fill:DetailVulnerability';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'fill flat_detail_vulnerability_lists table';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        echo 'run FillFlatDetailVulnerabilityLists Cron job'. PHP_EOL;

        FlatDetailVulnerabilityList::query()->delete();
        $flatTimeline = FlatTimeline::first();

        $vin = json_decode($flatTimeline->total_vin);
        $vout = json_decode($flatTimeline->total_vout);
        $net = json_decode($flatTimeline->total_net);
        $nonMicrosoftVIN = json_decode($flatTimeline->non_microsoft_vin);
        $nonMicrosoftVOUT = json_decode($flatTimeline->non_microsoft_vout);
        $nonMicrosoftNet = json_decode($flatTimeline->non_microsoft_net);
        $microsoftVIN = json_decode($flatTimeline->microsoft_vin);
        $microsoftVOUT = json_decode($flatTimeline->microsoft_vout);
        $microsoftNet = json_decode($flatTimeline->microsoft_net);

        foreach ($vin as $key => $value) {
            if($key != 'type'){
                $startOfDay = Carbon::createFromFormat('Y-m-d', $key)->startOfDay();
                $vinArray = [];
                foreach ($this->getVINForDate($startOfDay) as $k => $v){
                    $vinArray[$k]['id'] = $v->id;
                    $vinArray[$k]['queue_id'] = $v->queue_id;
                    $vinArray[$k]['path'] = $v->path;
                    $vinArray[$k]['version'] = $v->version;
                    $vinArray[$k]['version_rule_id'] = $v->version_rule_id;
                    $vinArray[$k]['secure'] = $v->secure;
                    $vinArray[$k]['eol'] = $v->eol;
                    $vinArray[$k]['type'] = $v->type;
                    $vinArray[$k]['product_id'] = $v->product_id;
                    $vinArray[$k]['secure_version'] = $v->secure_version;
                    $vinArray[$k]['unpatched'] = $v->unpatched;
                    $vinArray[$k]['vuln_id'] = $v->vuln_id;
                    $vinArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
                    $vinArray[$k]['special_path'] = $v->special_path;
                    $vinArray[$k]['arch'] = $v->arch;
                    $vinArray[$k]['installationCount'] = $v->installationCount;
                    $vinArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
                    $vinArray[$k]['criticality'] = $v->criticality;

                }
                FlatDetailVulnerabilityList::create([
                    'VIN' => json_encode($vinArray),
                    'type' => 'VIN',
                    'date' => $key
                ]);
            }
        }

        foreach ($vout as $key => $value) {
            if($key != 'type'){
                $startOfDay = Carbon::createFromFormat('Y-m-d', $key)->startOfDay();
                $voutArray = [];
                foreach ($this->getVOUTForDate($startOfDay) as $k => $v){
                    $voutArray[$k]['id'] = $v->id;
                    $voutArray[$k]['queue_id'] = $v->queue_id;
                    $voutArray[$k]['path'] = $v->path;
                    $voutArray[$k]['version'] = $v->version;
                    $voutArray[$k]['version_rule_id'] = $v->version_rule_id;
                    $voutArray[$k]['secure'] = $v->secure;
                    $voutArray[$k]['eol'] = $v->eol;
                    $voutArray[$k]['type'] = $v->type;
                    $voutArray[$k]['product_id'] = $v->product_id;
                    $voutArray[$k]['secure_version'] = $v->secure_version;
                    $voutArray[$k]['unpatched'] = $v->unpatched;
                    $voutArray[$k]['vuln_id'] = $v->vuln_id;
                    $voutArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
                    $voutArray[$k]['special_path'] = $v->special_path;
                    $voutArray[$k]['arch'] = $v->arch;
                    $voutArray[$k]['installationCount'] = $v->installationCount;
                    $voutArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
                    $voutArray[$k]['criticality'] = $v->criticality;

                }

                FlatDetailVulnerabilityList::create([
                    'VOUT' => json_encode($voutArray),
                    'type' => 'VOUT',
                    'date' => $key
                ]);
            }
        }


        foreach ($net as $key => $value) {
            if($key != 'type'){
                $startOfDay = Carbon::createFromFormat('Y-m-d', $key)->startOfDay();
                $netArray = [];
                foreach ($this->getNetByDate($startOfDay) as $k => $v){
                    $netArray[$k]['id'] = $v->id;
                    $netArray[$k]['queue_id'] = $v->queue_id;
                    $netArray[$k]['path'] = $v->path;
                    $netArray[$k]['version'] = $v->version;
                    $netArray[$k]['version_rule_id'] = $v->version_rule_id;
                    $netArray[$k]['secure'] = $v->secure;
                    $netArray[$k]['eol'] = $v->eol;
                    $netArray[$k]['type'] = $v->type;
                    $netArray[$k]['product_id'] = $v->product_id;
                    $netArray[$k]['secure_version'] = $v->secure_version;
                    $netArray[$k]['unpatched'] = $v->unpatched;
                    $netArray[$k]['vuln_id'] = $v->vuln_id;
                    $netArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
                    $netArray[$k]['special_path'] = $v->special_path;
                    $netArray[$k]['arch'] = $v->arch;
                    $netArray[$k]['installationCount'] = $v->installationCount;
                    $netArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
                    $netArray[$k]['criticality'] = $v->criticality;
                }

                FlatDetailVulnerabilityList::create([
                    'Net' => json_encode($netArray),
                    'type' => 'Net',
                    'date' => $key
                ]);

            }
        }

        foreach ($nonMicrosoftVIN as $key => $value) {
            if($key != 'type'){
                $startOfDay = Carbon::createFromFormat('Y-m-d', $key)->startOfDay();
                $results = $this->getVINForDateByVendor($startOfDay, false);
                $nonMicrosoftVINArray = [];
                foreach ($results as $k => $v){
                    $nonMicrosoftVINArray[$k]['id'] = $v->id;
                    $nonMicrosoftVINArray[$k]['queue_id'] = $v->queue_id;
                    $nonMicrosoftVINArray[$k]['path'] = $v->path;
                    $nonMicrosoftVINArray[$k]['version'] = $v->version;
                    $nonMicrosoftVINArray[$k]['version_rule_id'] = $v->version_rule_id;
                    $nonMicrosoftVINArray[$k]['secure'] = $v->secure;
                    $nonMicrosoftVINArray[$k]['eol'] = $v->eol;
                    $nonMicrosoftVINArray[$k]['type'] = $v->type;
                    $nonMicrosoftVINArray[$k]['product_id'] = $v->product_id;
                    $nonMicrosoftVINArray[$k]['secure_version'] = $v->secure_version;
                    $nonMicrosoftVINArray[$k]['unpatched'] = $v->unpatched;
                    $nonMicrosoftVINArray[$k]['vuln_id'] = $v->vuln_id;
                    $nonMicrosoftVINArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
                    $nonMicrosoftVINArray[$k]['special_path'] = $v->special_path;
                    $nonMicrosoftVINArray[$k]['arch'] = $v->arch;
                    $nonMicrosoftVINArray[$k]['installationCount'] = $v->installationCount;
                    $nonMicrosoftVINArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
                    $nonMicrosoftVINArray[$k]['criticality'] = $v->criticality;
                }

                FlatDetailVulnerabilityList::create([
                    'nonMicrosoftVIN' => json_encode($nonMicrosoftVINArray),
                    'type' => 'nonMicrosoftVIN',
                    'date' => $key
                ]);
            }
        }

        foreach ($nonMicrosoftVOUT as $key => $value) {
            if($key != 'type'){
                $startOfDay = Carbon::createFromFormat('Y-m-d', $key)->startOfDay();
                $nonMicrosoftVOUTVINArray = [];
                foreach ($this->getVOUTForDateByVendor($startOfDay, false) as $k => $v){
                    $nonMicrosoftVOUTVINArray[$k]['id'] = $v->id;
                    $nonMicrosoftVOUTVINArray[$k]['queue_id'] = $v->queue_id;
                    $nonMicrosoftVOUTVINArray[$k]['path'] = $v->path;
                    $nonMicrosoftVOUTVINArray[$k]['version'] = $v->version;
                    $nonMicrosoftVOUTVINArray[$k]['version_rule_id'] = $v->version_rule_id;
                    $nonMicrosoftVOUTVINArray[$k]['secure'] = $v->secure;
                    $nonMicrosoftVOUTVINArray[$k]['eol'] = $v->eol;
                    $nonMicrosoftVOUTVINArray[$k]['type'] = $v->type;
                    $nonMicrosoftVOUTVINArray[$k]['product_id'] = $v->product_id;
                    $nonMicrosoftVOUTVINArray[$k]['secure_version'] = $v->secure_version;
                    $nonMicrosoftVOUTVINArray[$k]['unpatched'] = $v->unpatched;
                    $nonMicrosoftVOUTVINArray[$k]['vuln_id'] = $v->vuln_id;
                    $nonMicrosoftVOUTVINArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
                    $nonMicrosoftVOUTVINArray[$k]['special_path'] = $v->special_path;
                    $nonMicrosoftVOUTVINArray[$k]['arch'] = $v->arch;
                    $nonMicrosoftVOUTVINArray[$k]['installationCount'] = $v->installationCount;
                    $nonMicrosoftVOUTVINArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
                    $nonMicrosoftVOUTVINArray[$k]['criticality'] = $v->criticality;
                }
                FlatDetailVulnerabilityList::create([
                    'nonMicrosoftVOUT' => json_encode($nonMicrosoftVOUTVINArray),
                    'type' => 'nonMicrosoftVOUT',
                    'date' => $key
                ]);
            }
        }

        foreach ($nonMicrosoftNet as $key => $value) {
            if($key != 'type'){
                $startOfDay = Carbon::createFromFormat('Y-m-d', $key)->startOfDay();

                $nonMicrosoftNetArray = [];
                foreach ($this->getNetForDateByVendor($startOfDay, false) as $k => $v){
                    $nonMicrosoftNetArray[$k]['id'] = $v->id;
                    $nonMicrosoftNetArray[$k]['queue_id'] = $v->queue_id;
                    $nonMicrosoftNetArray[$k]['path'] = $v->path;
                    $nonMicrosoftNetArray[$k]['version'] = $v->version;
                    $nonMicrosoftNetArray[$k]['version_rule_id'] = $v->version_rule_id;
                    $nonMicrosoftNetArray[$k]['secure'] = $v->secure;
                    $nonMicrosoftNetArray[$k]['eol'] = $v->eol;
                    $nonMicrosoftNetArray[$k]['type'] = $v->type;
                    $nonMicrosoftNetArray[$k]['product_id'] = $v->product_id;
                    $nonMicrosoftNetArray[$k]['secure_version'] = $v->secure_version;
                    $nonMicrosoftNetArray[$k]['unpatched'] = $v->unpatched;
                    $nonMicrosoftNetArray[$k]['vuln_id'] = $v->vuln_id;
                    $nonMicrosoftNetArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
                    $nonMicrosoftNetArray[$k]['special_path'] = $v->special_path;
                    $nonMicrosoftNetArray[$k]['arch'] = $v->arch;
                    $nonMicrosoftNetArray[$k]['installationCount'] = $v->installationCount;
                    $nonMicrosoftNetArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
                    $nonMicrosoftNetArray[$k]['criticality'] = $v->criticality;
                }

                FlatDetailVulnerabilityList::create([
                    'nonMicrosoftNet' => json_encode($nonMicrosoftNetArray),
                    'type' => 'nonMicrosoftNet',
                    'date' => $key
                ]);
            }
        }

        foreach ($microsoftVIN as $key => $value) {
            if($key != 'type'){
                $startOfDay = Carbon::createFromFormat('Y-m-d', $key)->startOfDay();
                $microsoftVINArray = [];
                foreach ($this->getVINForDateByVendor($startOfDay, true) as $k => $v){
                    $microsoftVINArray[$k]['id'] = $v->id;
                    $microsoftVINArray[$k]['queue_id'] = $v->queue_id;
                    $microsoftVINArray[$k]['path'] = $v->path;
                    $microsoftVINArray[$k]['version'] = $v->version;
                    $microsoftVINArray[$k]['version_rule_id'] = $v->version_rule_id;
                    $microsoftVINArray[$k]['secure'] = $v->secure;
                    $microsoftVINArray[$k]['eol'] = $v->eol;
                    $microsoftVINArray[$k]['type'] = $v->type;
                    $microsoftVINArray[$k]['product_id'] = $v->product_id;
                    $microsoftVINArray[$k]['secure_version'] = $v->secure_version;
                    $microsoftVINArray[$k]['unpatched'] = $v->unpatched;
                    $microsoftVINArray[$k]['vuln_id'] = $v->vuln_id;
                    $microsoftVINArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
                    $microsoftVINArray[$k]['special_path'] = $v->special_path;
                    $microsoftVINArray[$k]['arch'] = $v->arch;
                    $microsoftVINArray[$k]['installationCount'] = $v->installationCount;
                    $microsoftVINArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
                    $microsoftVINArray[$k]['criticality'] = $v->criticality;
                }

                FlatDetailVulnerabilityList::create([
                    'microsoftVIN' => json_encode($microsoftVINArray),
                    'type' => 'microsoftVIN',
                    'date' => $key
                ]);
            }
        }

        foreach ($microsoftVOUT as $key => $value) {
            if($key != 'type'){
                $startOfDay = Carbon::createFromFormat('Y-m-d', $key)->startOfDay();

                $microsoftVOUTArray = [];
                foreach ($this->getVOUTForDateByVendor($startOfDay, true) as $k => $v){
                    $microsoftVOUTArray[$k]['id'] = $v->id;
                    $microsoftVOUTArray[$k]['queue_id'] = $v->queue_id;
                    $microsoftVOUTArray[$k]['path'] = $v->path;
                    $microsoftVOUTArray[$k]['version'] = $v->version;
                    $microsoftVOUTArray[$k]['version_rule_id'] = $v->version_rule_id;
                    $microsoftVOUTArray[$k]['secure'] = $v->secure;
                    $microsoftVOUTArray[$k]['eol'] = $v->eol;
                    $microsoftVOUTArray[$k]['type'] = $v->type;
                    $microsoftVOUTArray[$k]['product_id'] = $v->product_id;
                    $microsoftVOUTArray[$k]['secure_version'] = $v->secure_version;
                    $microsoftVOUTArray[$k]['unpatched'] = $v->unpatched;
                    $microsoftVOUTArray[$k]['vuln_id'] = $v->vuln_id;
                    $microsoftVOUTArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
                    $microsoftVOUTArray[$k]['special_path'] = $v->special_path;
                    $microsoftVOUTArray[$k]['arch'] = $v->arch;
                    $microsoftVOUTArray[$k]['installationCount'] = $v->installationCount;
                    $microsoftVOUTArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
                    $microsoftVOUTArray[$k]['criticality'] = $v->criticality;
                }

                FlatDetailVulnerabilityList::create([
                    'microsoftVOUT' => json_encode($microsoftVOUTArray),
                    'type' => 'microsoftVOUT',
                    'date' => $key
                ]);
            }
        }

        foreach ($microsoftNet as $key => $value) {
            if($key != 'type'){
                $startOfDay = Carbon::createFromFormat('Y-m-d', $key)->startOfDay();

                $microsoftNetArray = [];
                foreach ($this->getNetForDateByVendor($startOfDay, true) as $k => $v){
                    $microsoftNetArray[$k]['id'] = $v->id;
                    $microsoftNetArray[$k]['queue_id'] = $v->queue_id;
                    $microsoftNetArray[$k]['path'] = $v->path;
                    $microsoftNetArray[$k]['version'] = $v->version;
                    $microsoftNetArray[$k]['version_rule_id'] = $v->version_rule_id;
                    $microsoftNetArray[$k]['secure'] = $v->secure;
                    $microsoftNetArray[$k]['eol'] = $v->eol;
                    $microsoftNetArray[$k]['type'] = $v->type;
                    $microsoftNetArray[$k]['product_id'] = $v->product_id;
                    $microsoftNetArray[$k]['secure_version'] = $v->secure_version;
                    $microsoftNetArray[$k]['unpatched'] = $v->unpatched;
                    $microsoftNetArray[$k]['vuln_id'] = $v->vuln_id;
                    $microsoftNetArray[$k]['missing_ms_kb'] = $v->missing_ms_kb;
                    $microsoftNetArray[$k]['special_path'] = $v->special_path;
                    $microsoftNetArray[$k]['arch'] = $v->arch;
                    $microsoftNetArray[$k]['installationCount'] = $v->installationCount;
                    $microsoftNetArray[$k]['os_soft_name'] = $v->OsSoft->os_soft_name;
                    $microsoftNetArray[$k]['criticality'] = $v->criticality;
                }

                FlatDetailVulnerabilityList::create([
                    'microsoftNet' => json_encode($microsoftNetArray),
                    'type' => 'microsoftNet',
                    'date' => $key
                ]);
            }
        }
    }
}
