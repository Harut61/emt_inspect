const { type } = require('jquery');

$(document).ready(function () {
    initChart();
    initPagination();
});

function initPagination(styleClass) {
    $('.page-link').click(function (e) {
        event.preventDefault();

        let page = $(this).attr('href').split('page=')[1];
        let table = null;

        if (e.target.tagName == "I") {
            table = e.target.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;
        } else {
            table = e.target.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;
        }

        fetch_data(page, table);
    });
}


function fetch_data(page, table) {
    $.ajax({
        url: `/vulnerability-health/pagination/${table.dataset.type}?page=${page}`,
        success: function (data) {
            $(table).replaceWith(data);
            initPagination();
        }
    });
}

function initChart() {
    let dates = _.uniq(Object.keys(scans));
    let scansCounnt = createAxisArray(dates, scans);

    Highcharts.chart('disk-usage', {

        chart: {
            type: 'line'
        },
        title: {
            text: ''
        },

        subtitle: {
            text: ''
        },

        yAxis: {
            title: {
                text: 'Disk Space Used %'
            }
        },

        xAxis: {
            categories: dates
        },

        legend: {
            layout: 'vertical',
            align: 'right',
            verticalAlign: 'middle'
        },

        plotOptions: {
            series: {
                label: {
                    connectorAllowed: false
                },
                pointStart: 0
            }
        },

        series: [{
            name: 'Space Used',
            data: scansCounnt
        }],

        responsive: {
            rules: [{
                condition: {
                    maxWidth: 500
                },
                chartOptions: {
                    legend: {
                        layout: 'horizontal',
                        align: 'center',
                        verticalAlign: 'bottom'
                    }
                }
            }]
        }

    });
}

function createAxisArray(dates, scans) {
    axisArray = [];

    dates.forEach(date => {
        axisArray.push({
            y: parseInt(scans[date][0].usage)
        });
    });

    return axisArray;
}
